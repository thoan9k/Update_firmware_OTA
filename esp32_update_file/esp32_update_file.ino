#include <ArduinoJson.h>
#include <ArduinoJson.hpp>

#include <WiFi.h>
#include <HTTPClient.h>

// C·∫•u h√¨nh WiFi
const char* ssid = "Hoang Van Thoan";
const char* password = "66778899";

// URL file c·∫ßn t·∫£i t·ª´ Google Drive ho·∫∑c github
const char* fileURL = "https://raw.githubusercontent.com/thoan9k/Update_firmware_OTA/main/hello.txt";
//https://drive.google.com/file/d/1__VMmdXdNzLhVKFZ8mkK2Ql_RdlmFkZ7/view?usp=sharing
//https://drive.google.com/file/d/1XCSFpM0-HctHF3a1fdo9JJAzk0HE7GpR/view?usp=sharing

// Base URL cho GitHub API
const char* repoAPI = "https://api.github.com/repos/thoan9k/Update_firmware_OTA/commits/main";
const char* baseURL = "https://raw.githubusercontent.com/thoan9k/Update_firmware_OTA/";
const char* firmwarefile = "/hello.txt";
const char* versionfile = "/version.json";
// Phi√™n b·∫£n hi·ªán t·∫°i c·ªßa ESP32
const char* current_version = "1.0.0";


String getLatestCommitHash() {
  HTTPClient http;
  http.begin(repoAPI);
  http.addHeader("User-Agent", "ESP32-HTTPClient");
  
  int httpCode = http.GET();
  String commitHash = "";
  
  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    
    // T√¨m commit hash trong JSON response
    int shaIndex = payload.indexOf("\"sha\":\"");
    if (shaIndex != -1) {
      commitHash = payload.substring(shaIndex + 7, shaIndex + 47); // SHA c√≥ 40 k√Ω t·ª±
      Serial.print("Latest commit: ");
      Serial.println(commitHash);
    }
  }
  
  http.end();
  return commitHash;
}

void downloadLatestFile(const char* fileName) {
  String commitHash = getLatestCommitHash();
  
  if (commitHash.length() > 0) {
    String latestURL = String(baseURL) + commitHash + fileName;
    Serial.print("URL v·ªõi commit hash: ");
    Serial.println(latestURL);
    
    // T·∫£i file v·ªõi URL m·ªõi
    HTTPClient http;
    http.begin(latestURL.c_str());
    
    int httpCode = http.GET();
    if (httpCode == HTTP_CODE_OK) {
      String content = http.getString();
      Serial.println("=== N·ªòI DUNG FILE M·ªöI NH·∫§T ===");
      Serial.println(content);
      Serial.println("==============================");
    }
    
    http.end();
  } else {
    Serial.println("Kh√¥ng l·∫•y ƒë∆∞·ª£c commit hash, d√πng URL c≈©...");
    downloadFile(); // Fallback
  }
}
void checkForUpdate() {
  Serial.println("ƒêang ki·ªÉm tra c·∫≠p nh·∫≠t...");
  
  String commitHash = getLatestCommitHash();
  if (commitHash.length() <=0) {
    Serial.println("Kh√¥ng l·∫•y ƒë∆∞·ª£c commit hash!");
     Serial.println("Kh√¥ng l·∫•y ƒë∆∞·ª£c commit hash!");
    return;
  }
  
  String latestURL = String(baseURL) + commitHash + versionfile;
  Serial.println("Checking: " + latestURL);
  
  HTTPClient http;
  http.begin(latestURL);
  http.addHeader("User-Agent", "ESP32-OTA-Client");
  http.addHeader("Cache-Control", "no-cache");
  
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    Serial.println("Response: " + payload);
    
    StaticJsonDocument<512> doc;
    DeserializationError error = deserializeJson(doc, payload);
    
    if (!error) {
      const char* new_version = doc["version"];
      
      if (new_version != nullptr) {
        Serial.println("Version hi·ªán t·∫°i: " + String(current_version));
        Serial.println("Version tr√™n server: " + String(new_version));
        
        if (String(new_version) != current_version) {
          Serial.println("üéâ Ph√°t hi·ªán phi√™n b·∫£n m·ªõi! ƒêang t·∫£i firmware...");
          
          // Uncomment khi s·∫µn s√†ng update
          // downloadLatestFile(firmwarefile);
          // performFirmwareUpdate();
          
          // Test mode - ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o
          Serial.println("‚ö†Ô∏è  Test mode - kh√¥ng th·ª±c hi·ªán update");
          
        } else {
          Serial.println("‚úÖ ƒê√£ l√† phi√™n b·∫£n m·ªõi nh·∫•t.");
        }
      } else {
        Serial.println("‚ùå Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng 'version' trong JSON");
      }
    } else {
      Serial.println("‚ùå L·ªói parse JSON: " + String(error.c_str()));
    }
  } else {
    Serial.println("‚ùå L·ªói t·∫£i version.json, m√£: " + String(httpCode));
  }
  
  http.end();
}
void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("B·∫Øt ƒë·∫ßu k·∫øt n·ªëi WiFi...");
  
  // K·∫øt n·ªëi WiFi
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("");
  Serial.println("WiFi ƒë√£ k·∫øt n·ªëi!");
  Serial.print("ƒê·ªãa ch·ªâ IP: ");
  Serial.println(WiFi.localIP());
  
  // T·∫£i file
  // downloadFile();
  // downloadLatestFile(firmwarefile);
}

void loop() {
  // Kh√¥ng l√†m g√¨ trong loop
  checkForUpdate();
  // Serial.println("ok");
  delay(500);
}

void downloadFile() {
  HTTPClient http;
  
  Serial.println("B·∫Øt ƒë·∫ßu t·∫£i file...");
  Serial.print("URL: ");
  Serial.println(fileURL);
  
  // Kh·ªüi t·∫°o HTTP request
  http.begin(fileURL);
  http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);
  
  // Th√™m header n·∫øu c·∫ßn
  http.addHeader("User-Agent", "ESP32-HTTPClient");
  http.addHeader("Accept", "text/plain, */*");
  http.addHeader("Cache-Control", "no-cache");
  
  // G·ª≠i GET request
  int httpResponseCode = http.GET();
  
  if (httpResponseCode > 0) {
    Serial.print("HTTP Response Code: ");
    Serial.println(httpResponseCode);
    
    // In ra headers ƒë·ªÉ debug
    Serial.println("=== RESPONSE HEADERS ===");
    Serial.print("Content-Type: ");
    Serial.println(http.header("Content-Type"));
    Serial.print("Content-Length: ");
    Serial.println(http.header("Content-Length"));
    Serial.print("Location: ");
    Serial.println(http.header("Location"));
    Serial.println("========================");
    
    if (httpResponseCode == HTTP_CODE_OK) {
      // L·∫•y ƒë·ªô d√†i n·ªôi dung
      int contentLength = http.getSize();
      Serial.print("K√≠ch th∆∞·ªõc file: ");
      Serial.print(contentLength);
      Serial.println(" bytes");
      
      // ƒê·ªçc v√† in n·ªôi dung file
      String payload = http.getString();
      Serial.println("=== N·ªòI DUNG FILE ===");
      Serial.println(payload);
      Serial.println("=== K·∫æT TH√öC FILE ===");
      
      Serial.print("ƒê√£ t·∫£i th√†nh c√¥ng ");
      Serial.print(payload.length());
      Serial.println(" k√Ω t·ª±");
    } else {
      Serial.print("L·ªói HTTP: ");
      Serial.println(httpResponseCode);
    }
  } else {
    Serial.print("L·ªói k·∫øt n·ªëi: ");
    Serial.println(http.errorToString(httpResponseCode).c_str());
  }
  
  // ƒê√≥ng k·∫øt n·ªëi
  http.end();
}

// H√†m t·∫£i file l·ªõn v·ªõi buffer (cho file k√≠ch th∆∞·ªõc l·ªõn)
void downloadLargeFile(const char* url) {
  HTTPClient http;
  
  Serial.println("B·∫Øt ƒë·∫ßu t·∫£i file l·ªõn...");
  
  http.begin(url);
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
    WiFiClient* stream = http.getStreamPtr();
    int len = http.getSize();
    
    Serial.print("K√≠ch th∆∞·ªõc file: ");
    Serial.println(len);
    Serial.println("=== B·∫ÆT ƒê·∫¶U N·ªòI DUNG ===");
    
    uint8_t buff[128] = { 0 };
    int totalRead = 0;
    
    while (http.connected() && (len > 0 || len == -1)) {
      size_t size = stream->available();
      
      if (size) {
        int c = stream->readBytes(buff, ((size > sizeof(buff)) ? sizeof(buff) : size));
        
        // In ra Serial
        for (int i = 0; i < c; i++) {
          Serial.write(buff[i]);
        }
        
        totalRead += c;
        
        if (len > 0) {
          len -= c;
        }
      }
      delay(1);
    }
    
    Serial.println("\n=== K·∫æT TH√öC N·ªòI DUNG ===");
    Serial.print("T·ªïng c·ªông ƒë√£ ƒë·ªçc: ");
    Serial.print(totalRead);
    Serial.println(" bytes");
  } else {
    Serial.printf("L·ªói HTTP: %d\n", httpCode);
  }
  
  http.end();
}